"""
Django settings for LegalAI project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
from datetime import timedelta
from enum import Enum
from typing import List

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-&#=g7(s0y_j57yf@=xd*czqn^0!l6_3g7ts3nyf8o!wmcgeqw!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "graphql_jwt.refresh_token.apps.RefreshTokenConfig",
    "graphene_django",
    "corsheaders",
    "bot",
]

ASGI_APPLICATION = "LegalAI.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(config("REDIS_SERVER_HOST"), config("REDIS_SERVER_PORT")), ],
            "capacity": 10000,
            "expiry": 10,
        },
    },
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # Your frontend's domain
#     "https://yourfrontenddomain.com",
# ]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "LegalAI.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LegalAI.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": config("MY_SQL_DATABASE_SERVER_DB_NAME"),
        "USER": config("MY_SQL_DATABASE_SERVER_USER"),
        "PASSWORD": config("MY_SQL_DATABASE_SERVER_PASSWORD"),
        "HOST": config("MY_SQL_DATABASE_SERVER_HOST"),
        "PORT": config("MY_SQL_DATABASE_SERVER_PORT"),
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET collation_connection = utf8mb4_unicode_ci",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STRIPE_SECRETE_KEY = config("STRIPE_SECRET_KEY")
STRIPE_PUBLIC_KEY = config("STRIPE_PUBLIC_KEY")
OPENAI_KEY = config("OPENAI_KEY")
PRIMARY_MODEL = config("PRIMARY_MODEL")
PRIMARY_MODEL_INPUT_PRICE_PER_TOKEN_IN_CENTS=config("PRIMARY_MODEL_INPUT_PRICE_PER_TOKEN_IN_CENTS")
PRIMARY_MODEL_OUTPUT_PRICE_PER_TOKEN_IN_CENTS=config("PRIMARY_MODEL_OUTPUT_PRICE_PER_TOKEN_IN_CENTS")
webhook_secret = config("webhook_secret")

GRAPHENE = {
    "SCHEMA": "bot.schema.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}

AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]

GRAPHQL_JWT = {
    # "JWT_ALLOW_ANY_CLASSES": [
    #     #connect GraphQL Auth to GraphQL JWT for authentication
    #     "graphql_auth.mutations.Register",
    #     "graphql_auth.mutations.VerifyAccount",
    #     "graphql_auth.mutations.ObtainJSONWebToken",# get jwt to log in
    # ],
    "JWT_VERIFY_EXPIRATION": True,  # affirm that the jwt token will expire
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    "JWT_EXPIRATION_DELTA": timedelta(days=7),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=30),
}

MEDIA_ROOT = config("MEDIA_ROOT")

US_CONSTITUTION_VECTOR_DB_PATH = MEDIA_ROOT + config("US_CONSTITUTION_VECTOR_DB_PATH")
SYSTEM_VECTOR_DB_PATH = MEDIA_ROOT + config("SYSTEM_VECTOR_DB_PATH")
USER_DOCUMENTS__VECTOR_DB_PATH = MEDIA_ROOT + config("USER_DOCUMENTS__VECTOR_DB_PATH")

PDF_FILE_TYPE_NAME = "PDF"
TXT_FILE_TYPE_NAME = "TXT"

VECTOR_DB_PERSIST_STORAGE = "database"

PDF_FILE_STORAGE_SUBDIRECTORY = "documents/pdf"
TXT_FILE_STORAGE_SUBDIRECTORY = "documents/txt"

SYSTEM_FILES_OWNER_NAME = "System"
USER_FILES_OWNER_NAME = "User"


class COURT_BRIEF_ARGUMENT_INFO:
    def __init__(self, _title: str, _description: str) -> None:
        self.title = _title
        self.description = _description


class COURT_BRIEF_INFO:
    def __init__(
        self,
        _court_name: str,
        _court_term: str,
        _petitioner_name: str,
        _respondent_name: str,
        _title_of_brief: str,
        _submitting_entity: str,
        _attorneys: List[str],
        _questions_presented: List[str],
        _table_of_authorities: List[str],
        _statement_of_case: str,
        _arguments_of_case: List[COURT_BRIEF_ARGUMENT_INFO],
        _summary_of_arguments: str,
        _conclusion: str,
    ) -> None:
        self.court_name = _court_name
        self.court_term = _court_term
        self.petitioner_name = _petitioner_name
        self.respondent_name = _respondent_name
        self.title_of_brief = _title_of_brief
        self.submitting_entity = _submitting_entity
        self.attorneys = _attorneys
        self.questions_presented = _questions_presented
        self.table_of_authorities = _table_of_authorities
        self.statement_of_case = _statement_of_case
        self.arguments_of_case = _arguments_of_case
        self.summary_of_arguments = _summary_of_arguments
        self.conclusion = _conclusion


class COURT_BRIEF_TEMPLATE_INFO:
    def __init__(
        self,
        _PATH,
        _MAIN_TEMPLATE,
        _QUESTION_TEMPLATE,
        _AUTHORITY_TEMPLATE,
        _ARGUMENT_TEMPLATE,
    ) -> None:
        self.MAIN_TEMPLATE = _PATH + _MAIN_TEMPLATE
        self.QUESTION_TEMPLATE = _PATH + _QUESTION_TEMPLATE
        self.AUTHORITY_TEMPLATE = _PATH + _AUTHORITY_TEMPLATE
        self.ARGUMENT_TEMPLATE = _PATH + _ARGUMENT_TEMPLATE


class COURT_BRIEF_HTML_TEMPLATES(Enum):
    PATH = MEDIA_ROOT + "Templates/"
    SAMPLE_BRIEF = COURT_BRIEF_TEMPLATE_INFO(
        _PATH=PATH + "SAMPLE_TEMPLATE/",
        _MAIN_TEMPLATE="court_brief_template.html",
        _QUESTION_TEMPLATE="court_brief_question_template.html",
        _AUTHORITY_TEMPLATE="court_brief_authority_template.html",
        _ARGUMENT_TEMPLATE="court_brief_argument_template.html",
    )


COURT_BRIEF_TEMPLATE_HTML_FILE_PATH = MEDIA_ROOT + "Templates/court_brief_template.html"

COURT_LISTENER_API_ADDRESS = "https://www.courtlistener.com/api/rest/v3/"
COURT_LISTENER_ADDRESS = "https://www.courtlistener.com"

COURT_LISTENER_API_TOKEN = config("COURT_LISTENER_API_TOKEN")

COURT_LISTENER_JURISDICTIONS = [
    {"value": "F", "display_name": "Federal Appellate"},
    {"value": "FD", "display_name": "Federal District"},
    {"value": "FB", "display_name": "Federal Bankruptcy"},
    {"value": "FBP", "display_name": "Federal Bankruptcy Panel"},
    {"value": "FS", "display_name": "Federal Special"},
    {"value": "S", "display_name": "State Supreme"},
    {"value": "SA", "display_name": "State Appellate"},
    {"value": "ST", "display_name": "State Trial"},
    {"value": "SS", "display_name": "State Special"},
    {"value": "TRS", "display_name": "Tribal Supreme"},
    {"value": "TRA", "display_name": "Tribal Appellate"},
    {"value": "TRT", "display_name": "Tribal Trial"},
    {"value": "TRX", "display_name": "Tribal Special"},
    {"value": "TS", "display_name": "Territory Supreme"},
    {"value": "TA", "display_name": "Territory Appellate"},
    {"value": "TT", "display_name": "Territory Trial"},
    {"value": "TSP", "display_name": "Territory Special"},
    {"value": "SAG", "display_name": "State Attorney General"},
    {"value": "MA", "display_name": "Military Appellate"},
    {"value": "MT", "display_name": "Military Trial"},
    {"value": "C", "display_name": "Committee"},
    {"value": "I", "display_name": "International"},
    {"value": "T", "display_name": "Testing"},
]


class WEBSOCKET_EVENT_TYPES(Enum):
    CONNECTION_SUCCESS = "type.connection_success"
    CONNECTION_FAIL = "type.connection_fail"
    ERROR = "type.error"
    QUERY_AND_REPLY = "type.query_and_reply"
    COURTLISTENER_SEARCH = "type.courtlistener_search"
    COURTLISTENER_OPINION = "type.courtlistener_opinion"
    COURTLISTENER_CITATIONS = "type.courtlistener_citations"
    COURTLISTENER_CITATION_SUMMARY = "type.courtlistener_citation_summary"
    SYSTEM_BUSY = "type.system_busy"
    SYSTEM_EASY = "type.system_easy"


class TRIGGER_INFO:
    def __init__(
        self, _NUMBER: str, _NAME, _CONDITION: str, _IDENTITY: str, _INSTRUCTION: str
    ) -> None:
        self.NUMBER = _NUMBER
        self.NAME = _NAME
        self.CONDITION = _CONDITION
        self.IDENTITY = _IDENTITY
        self.INSTRUCTION = _INSTRUCTION


class LLM_TRIGGERS(Enum):
    TRIGGER_NUMBER_1 = TRIGGER_INFO(
        "TRIGGER#1",
        "SEACH FROM SYSTEM DB",
        "You require additional information from our DB of Court Breifes,Histories and Opinions",
        "&&1&&",
        "max 2 search keywords for db",
    )
    TRIGGER_NUMBER_2 = TRIGGER_INFO(
        "TRIGGER#2",
        "SEARCH FROM USER DOCS",
        "You require additional information from documents uploaded by user or when user asks info from them and that info is not provided to you",
        "&&2&&",
        "search query for Similarity Search, if this query is for searching info for court brief, then return many search query for each section",
    )
    TRIGGER_NUMBER_3 = TRIGGER_INFO(
        "TRIGGER#3",
        "REPLY TO USER",
        "You want to send response after you are confident that your reply is what user is looking for",
        "&&3&&",
        "your reply for user",
    )
    TRIGGER_NUMBER_4 = TRIGGER_INFO(
        "TRIGGER#4",
        "SEARCH FROM CONSTITUTION",
        "User asks some query related to US Constitution and you need solid information from constitution",
        "&&4&&",
        "Search query for US Constitution Document",
    )
    TRIGGER_NUMBER_5 = TRIGGER_INFO(
        "TRIGGER#5",
        "GENERATE BRIEF",
        """
        If user wants you to generate Document (Court Brief), you will make sure that you have all the required information to generate document
                that will have following sections:
                1. Court Name 2. Court Term (e.g Spring Term 2021) 3. Petitioner Name 4. Rspondent Name
                5. Title of Brief 6. Submitting Entity 7. Attorneys 8. List of Questions Presented
                9. Table of Authorities (Cases Names of Past Opinions from which you generated arguments)
                10. Statement of Case 11. Arguments of Case/Brief (Atlease 3 with argument Heading/Title and argument description)
                12. Summary of Arguments 13. Conclusion
                If you are confident that you have necessary information (All 13 sections) after conversation with user for the document 
        """,
        "&&5&&",
        "Nothing else, only reply with &&5&& after making sure you have information mentioned above to generate document else continue asking user using &&3&&",
    )
